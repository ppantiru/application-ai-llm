/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AssisterInputChangeEventDetail, IncomingEventDetail, MessageDirection, MessageState, MessageTriangle } from "./interfaces";
export { AssisterInputChangeEventDetail, IncomingEventDetail, MessageDirection, MessageState, MessageTriangle } from "./interfaces";
export namespace Components {
    interface ChatCheckMark {
        "ticks": 'one' | 'two';
    }
    interface ChatConversation {
        "scrollToBottom": () => Promise<void>;
    }
    interface ChatInput {
    }
    interface ChatMessage {
        "direction": MessageDirection;
        "footer": string;
        "state": MessageState;
        "triangle": MessageTriangle;
    }
    interface ChatMessageStatus {
        "state": MessageState;
    }
    interface ChatPane {
        "addButton": ({ text, action }: { text: string; action: () => any; }) => Promise<HTMLElement>;
        "addCard": ({ text, image }: { text?: string; image?: string; }) => Promise<HTMLElement>;
        "addIncomingMessage": (text: string) => Promise<HTMLChatMessageElement>;
        "addOutgoingMessage": (text: string) => Promise<HTMLChatMessageElement>;
        "mapInputTextToHtmlElements": (text: string) => HTMLElement[];
        "scrollToBottom": () => Promise<void>;
        "triangle": MessageTriangle;
    }
    interface ChatSettings {
        "getSettings": () => Promise<{ llmServerAddress: string; selectedModel: string; temperature: number; jsonWebToken: string; stream: boolean; }>;
    }
    interface FabApp {
        "close": () => Promise<void>;
        "ionicon": string;
    }
    interface PromptPicker {
    }
}
export interface ChatInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChatInputElement;
}
export interface ChatPaneCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChatPaneElement;
}
declare global {
    interface HTMLChatCheckMarkElement extends Components.ChatCheckMark, HTMLStencilElement {
    }
    var HTMLChatCheckMarkElement: {
        prototype: HTMLChatCheckMarkElement;
        new (): HTMLChatCheckMarkElement;
    };
    interface HTMLChatConversationElement extends Components.ChatConversation, HTMLStencilElement {
    }
    var HTMLChatConversationElement: {
        prototype: HTMLChatConversationElement;
        new (): HTMLChatConversationElement;
    };
    interface HTMLChatInputElementEventMap {
        "send": AssisterInputChangeEventDetail;
    }
    interface HTMLChatInputElement extends Components.ChatInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChatInputElementEventMap>(type: K, listener: (this: HTMLChatInputElement, ev: ChatInputCustomEvent<HTMLChatInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChatInputElementEventMap>(type: K, listener: (this: HTMLChatInputElement, ev: ChatInputCustomEvent<HTMLChatInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChatInputElement: {
        prototype: HTMLChatInputElement;
        new (): HTMLChatInputElement;
    };
    interface HTMLChatMessageElement extends Components.ChatMessage, HTMLStencilElement {
    }
    var HTMLChatMessageElement: {
        prototype: HTMLChatMessageElement;
        new (): HTMLChatMessageElement;
    };
    interface HTMLChatMessageStatusElement extends Components.ChatMessageStatus, HTMLStencilElement {
    }
    var HTMLChatMessageStatusElement: {
        prototype: HTMLChatMessageStatusElement;
        new (): HTMLChatMessageStatusElement;
    };
    interface HTMLChatPaneElementEventMap {
        "incoming": IncomingEventDetail;
    }
    interface HTMLChatPaneElement extends Components.ChatPane, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChatPaneElementEventMap>(type: K, listener: (this: HTMLChatPaneElement, ev: ChatPaneCustomEvent<HTMLChatPaneElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChatPaneElementEventMap>(type: K, listener: (this: HTMLChatPaneElement, ev: ChatPaneCustomEvent<HTMLChatPaneElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChatPaneElement: {
        prototype: HTMLChatPaneElement;
        new (): HTMLChatPaneElement;
    };
    interface HTMLChatSettingsElement extends Components.ChatSettings, HTMLStencilElement {
    }
    var HTMLChatSettingsElement: {
        prototype: HTMLChatSettingsElement;
        new (): HTMLChatSettingsElement;
    };
    interface HTMLFabAppElement extends Components.FabApp, HTMLStencilElement {
    }
    var HTMLFabAppElement: {
        prototype: HTMLFabAppElement;
        new (): HTMLFabAppElement;
    };
    interface HTMLPromptPickerElement extends Components.PromptPicker, HTMLStencilElement {
    }
    var HTMLPromptPickerElement: {
        prototype: HTMLPromptPickerElement;
        new (): HTMLPromptPickerElement;
    };
    interface HTMLElementTagNameMap {
        "chat-check-mark": HTMLChatCheckMarkElement;
        "chat-conversation": HTMLChatConversationElement;
        "chat-input": HTMLChatInputElement;
        "chat-message": HTMLChatMessageElement;
        "chat-message-status": HTMLChatMessageStatusElement;
        "chat-pane": HTMLChatPaneElement;
        "chat-settings": HTMLChatSettingsElement;
        "fab-app": HTMLFabAppElement;
        "prompt-picker": HTMLPromptPickerElement;
    }
}
declare namespace LocalJSX {
    interface ChatCheckMark {
        "ticks"?: 'one' | 'two';
    }
    interface ChatConversation {
    }
    interface ChatInput {
        "onSend"?: (event: ChatInputCustomEvent<AssisterInputChangeEventDetail>) => void;
    }
    interface ChatMessage {
        "direction"?: MessageDirection;
        "footer"?: string;
        "state"?: MessageState;
        "triangle"?: MessageTriangle;
    }
    interface ChatMessageStatus {
        "state"?: MessageState;
    }
    interface ChatPane {
        "mapInputTextToHtmlElements"?: (text: string) => HTMLElement[];
        "onIncoming"?: (event: ChatPaneCustomEvent<IncomingEventDetail>) => void;
        "triangle"?: MessageTriangle;
    }
    interface ChatSettings {
    }
    interface FabApp {
        "ionicon"?: string;
    }
    interface PromptPicker {
    }
    interface IntrinsicElements {
        "chat-check-mark": ChatCheckMark;
        "chat-conversation": ChatConversation;
        "chat-input": ChatInput;
        "chat-message": ChatMessage;
        "chat-message-status": ChatMessageStatus;
        "chat-pane": ChatPane;
        "chat-settings": ChatSettings;
        "fab-app": FabApp;
        "prompt-picker": PromptPicker;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "chat-check-mark": LocalJSX.ChatCheckMark & JSXBase.HTMLAttributes<HTMLChatCheckMarkElement>;
            "chat-conversation": LocalJSX.ChatConversation & JSXBase.HTMLAttributes<HTMLChatConversationElement>;
            "chat-input": LocalJSX.ChatInput & JSXBase.HTMLAttributes<HTMLChatInputElement>;
            "chat-message": LocalJSX.ChatMessage & JSXBase.HTMLAttributes<HTMLChatMessageElement>;
            "chat-message-status": LocalJSX.ChatMessageStatus & JSXBase.HTMLAttributes<HTMLChatMessageStatusElement>;
            "chat-pane": LocalJSX.ChatPane & JSXBase.HTMLAttributes<HTMLChatPaneElement>;
            "chat-settings": LocalJSX.ChatSettings & JSXBase.HTMLAttributes<HTMLChatSettingsElement>;
            "fab-app": LocalJSX.FabApp & JSXBase.HTMLAttributes<HTMLFabAppElement>;
            "prompt-picker": LocalJSX.PromptPicker & JSXBase.HTMLAttributes<HTMLPromptPickerElement>;
        }
    }
}
