<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="AI.Code.CKEditorPlugin" locale="">
  <web>AI.Code</web>
  <name>CKEditorPlugin</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <originalMetadataAuthor>XWiki.MunozMateo</originalMetadataAuthor>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>AI.Code.CKEditorPlugin</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>bcd764d7-ed14-41ed-8944-ad6cb8254ba4</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>define('llmActionModal', ['jquery', 'modal'], function($, $modal) {
  'use strict';
  return $modal.createModalStep({
    'class': 'llm-action-modal',
    onLoad: function() {
      var modal = this;
      var modalBody = modal.find('.modal-body');
      //var submitButton = modal.find('.modal-footer .btn-primary');
      modal.on('show.bs.modal', function(event) {
        if (modalBody.is(':empty') &amp;&amp; !modalBody.hasClass('loading')) {
          modalBody.addClass('loading');
          // Define a module that holds the required translation keys.
          define('llm-translation', {
            prefix: 'llm.',
            keys: [
              "editor.modal.title",
              "editor.modal.button",
              "ui.copy",
              "ui.include",
              "ui.copyLabel",
              "ui.includeLabel",
              "ui.assistantInfoName",
            ]
          });

          // Require the translation messages using the dedicated loader.
          require(['xwiki-l10n!llm-translation'], function(l10n) {
            // Translation key without parameters.
            console.log(l10n['editor.modal.button']);

            // Translation key with parameters.
            //submitButton.text(l10n.get('editor.modal.button'));
            modal.find('.modal-title').text(l10n.get('editor.modal.title'));
          });
          var formURL = modal.data('input').formURL;
          $.get(formURL).done(function(html) {
            modalBody.html(html);
            var form = document.querySelector('#userChat');
            require(['xwiki-llm'], function(llm) {
              llm.init();
              const editorElement = document.querySelector('#xwikicontent');
              const editor = CKEDITOR.instances[editorElement.getAttribute('id')];
              const chatContent = document.querySelector('#chatContent');
              chatContent.addEventListener('click', async function(event) {
                const msgID = await llm.handleButtonClick(event);
                console.log('msg ID targeted :', msgID);
                if(msgID.indexOf('include') !== -1){
                  llm.includeInDoc(msgID).then((textToInsert)=&gt;{
                    console.log(textToInsert);
                    editor.insertText(textToInsert);
                  });
                }
              });
            });
          }).fail(function() {
            var errorMessage = $('&lt;div class="box errormessage"&gt;&lt;/div&gt;')
            .text(l10n.get('llm.editor.modal.failedToLoadForm'));
            modalBody.empty().append(errorMessage);
          }).always(function() {
            modalBody.removeClass('loading');
          });
        }
      });
    }
  });
});


(function() {
  'use strict';
  var $ = jQuery;

  // Declare the configuration namespace.
  CKEDITOR.config['llm-action'] = CKEDITOR.config['llm-action'] || {
    __namespace: true
  };

  CKEDITOR.plugins.add('llm-action', {
    // no sure we need all this..
    requires: 'uploadwidget,notification,xwiki-localization,xwiki-macro,xwiki-dialog',

    init: async function (editor) {
      var thisPlugin = this;

      // Fill missing configuration with default values.
      editor.config['llm-action'] = $.extend({
        enabled: false,
        llmchat: editor.config.sourceDocument.getURL('get', $.param({
          sheet: 'AI.Code.TestUI',
          language: $('html').attr('lang') || ''
        }))
      }, editor.config['llm-action']);

      editor.config.extraQuickActions = [{
        group: 'Content',
        id: 'llm-ai',
        name: 'AI',
        iconClass: 'fa fa-laptop',
        description: 'Insert content from AI',
        command: 'llmaction'
      }];

      var authorizedPromise;
      // Convert require into a Promise
      const requirePromise = new Promise((resolve, reject) =&gt; {
        require(['xwiki-meta', 'xwiki-llm'], (xm, llm) =&gt; {
          const csrf_token = xm.form_token;
          authorizedPromise = llm.getCheck(csrf_token);
          resolve();
        }, reject);
      });
      this.initLLMButton(editor);
      // Wait for the requirePromise to resolve before continuing.
      await requirePromise;
      try {
        const authorized = await authorizedPromise;
        console.log('authorized: ', authorized);
          if (authorized) {
            const command = editor.getCommand('llmaction');
            // const button = editor.ui.get('llmButton');
            //console.log(button);
              command.enable();
              //console.log(button.getState());
            console.log('test');
          }
      }catch (error) {
        console.error('Error occurred while checking authorization:', error);
      }
    },


    initLLMButton: function(editor) {
      console.log(this);
      console.log(editor);
      var thisPlugin = this;
      var llmConfig = editor.config['llm-action'];
      editor.ui.addButton('llmButton', {
        label: 'LLM Button',
        icon: 'paste',
        command: 'llmaction',
        toolbar: 'insert,70'
      });
      console.log('init ckeditor done.');
      editor.addCommand('llmaction', {
        async: true,
        contextSensitive: false,
        startDisabled: true,
        exec: function(editor) {
          var command = this;
          require(['llmActionModal'], function(llmActionModal) {
            llmActionModal({
              formURL: llmConfig.llmchat,
              localization: editor.localization
            }).done(function(formData) {
              // do something here
            }).always(function() {
              editor.fire('afterCommandExec', {name: command.name, command: command});
            });
          }, editor); // Pass editor as an additional argument
        }
      });
    },
  });
})();</code>
    </property>
    <property>
      <name>CKEditor Plugin JSX</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
