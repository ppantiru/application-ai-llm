<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="AI.Code.Javascript" locale="">
  <web>AI.Code</web>
  <name>Javascript</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>AI.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <originalMetadataAuthor>XWiki.superadmin</originalMetadataAuthor>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#set($MyDoc = $xwiki.getDocument("AI.Code.AIConfig"))
#set($class = $xwiki.getClass("AI.Code.AIConfigClass"))
#set($objArray = [])

#foreach($obj in $MyDoc.getObjects("AI.Code.AIConfigClass"))
  #set($objData = [])  ## Créez un nouveau tableau pour chaque objet
  #set($discard = $MyDoc.use($obj))
  #foreach($prop in $class.properties) ## Parcourez toutes les propriétés
    ## Ajoutez chaque propriété au tableau de l'objet
    #set($value = $MyDoc.display($prop.getName()))
    #set($discard = $objData.add({ "property": $prop.name, "value": $value }))
  #end

  ## Ajoutez le tableau de l'objet au tableau principal
  #set($discard = $objArray.add($objData))
#end
{{/velocity}}</content>
  <object>
    <name>AI.Code.Javascript</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>62bb6859-7384-4746-a4b3-7c2cb018653e</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define("xwiki-llm", ['jquery', 'xwiki-events-bridge'], function ($) {
    var initDone = false;
    var nbAssistMsg = 0;
    var context = new Array();
    let contextSize = 0;
    let nbToken = 0;
    let btnEnabled = true;
    let maxToken = 2000;
    var configsJson = new Array();

    // controler to stop a request if needed.
    let globalAbortController = new AbortController();
    let globalSignal = globalAbortController.signal;

    var loadCSS = function (url) {
        $('&lt;link&gt;').attr({
            type: 'text/css',
            rel: 'stylesheet',
            href: url
        }).appendTo('head');
    };

    var css = [
        // Styles for the editor UI (tool bar, dialogs, etc.).
        new XWiki.Document(XWiki.Model.resolve("AI.Code.StyleSheet", XWiki.EntityType.DOCUMENT)).getURL('ssx'),
    ];
    css.forEach(loadCSS);

    // Scroll to the bottom of the chat content
    function scrollToBottom() {
        const chatContent = document.querySelector('#chatContent');
        chatContent.scrollTop = chatContent.scrollHeight;
    }

    function isJSON(str) {
        try {
            JSON.parse(str);
        } catch (e) {
            return false;
        }
        return true;
    }

    function blockStreamMode() {
        const model = document.querySelector('#model-menu').value;
        const streamMode = document.querySelector('#streamMode');
        const requestMode = document.querySelector('#requestMode');
        const cannotStream = (model.indexOf('openai') === -1) &amp;&amp; (model.indexOf('localai') === -1);
        if (cannotStream) {
            streamMode.disabled = true;
            streamMode.checked = false;
            requestMode.checked = true;
        }
        else {
            streamMode.disabled = false;
        }
    }

    function addUserChat(userChat) {
        return `&lt;pre class="user-message"&gt;${userChat}&lt;/pre&gt;`;
    }

    function addAssistantChat(assistantChat, model, elapsedTime) {
        nbAssistMsg++;
        const html = `&lt;div id="assist-msg-` + `${nbAssistMsg}" class="assistant-message"&gt;
  &lt;div class="model-info" id="mod-inf-`+ `${nbAssistMsg}"&gt;Assistant (${model}) - ${elapsedTime} sec&lt;/div&gt;
    &lt;pre class="message-content" id="msg-content-`+ `${nbAssistMsg}"&gt;${assistantChat}&lt;/pre&gt;
    &lt;div class="astMsgButton"&gt;
        &lt;button type="button" class="copy-button" id="copy-button-`+ `${nbAssistMsg}" style="display: none;" title="Copy the message to clipboard."&gt;Copy&lt;/button&gt;
        &lt;button type="button" class="include-button" id="include-button-`+ `${nbAssistMsg}" style="display: none;" title="Include the message in the edited page."&gt;Include&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;`;
        return html;
    }

    function addSystemChat(msg) {
        const html = `&lt;div id="system-msg" class="system-message"&gt;
                      &lt;div class="system-info"&gt;System&lt;/div&gt;
                      &lt;pre class="message-content"&gt;${msg}&lt;/pre&gt;
                    &lt;/div&gt;`;
        return html;
    }

    function updateAssistantChat(msgIdNum, updatedTime, chunkReply, model) {
        document.querySelector('#mod-inf-' + msgIdNum).textContent = `Assistant (${model}) - ${updatedTime} sec`;
        document.querySelector('#msg-content-' + msgIdNum).textContent += chunkReply;
    }

    function errorMessagePrint(errorMessage) {
        return `&lt;div class="errorHandler"&gt;${errorMessage}&lt;/div&gt;`;
    }

    function copyTextToClipboard(numMsgToCopy) {
        return new Promise((resolve, reject) =&gt; {
            const numericID = numMsgToCopy.replace("copy-button-", "");
            const numMsg = parseInt(numericID);
            const text = document.querySelector('#msg-content-' + numMsg).textContent;
            console.log('text to copy : ' + text);
            window.getSelection().selectAllChildren(document.querySelector('#msg-content-' + numMsg));
            document.execCommand("Copy");
            window.getSelection().removeAllRanges();
            resolve(text);
        });
    }

    function includeInDoc(msgID) {
        return new Promise((resolve, reject) =&gt; {
            const numericID = msgID.replace("include-button-", "");
            const numMsg = parseInt(numericID);
            const text = document.querySelector('#msg-content-' + numMsg).textContent;
            console.log('text to include: ' + text);
            resolve(text);
        });
    }

    function chooseMaxToken(modelType) {
        if (modelType !== 'openai') {
            return 2000;
        }
        else return 4000;
    }

    function countTokens(query) {
        query = query.trim();
        const words = query.split(' ');
        const filteredWords = words.filter(word =&gt; word !== '');

        // One token equal to approximatively 1.3 token (based on OpenAI tokenization)
        const tokenCount = filteredWords.length * 1.3;

        return Math.floor(tokenCount);
    }

    function getPrompt(selectedFunc) {
        let prompt = '';
        switch (selectedFunc) {
            case 'summarize':
                prompt = 'you are an assistant, you help to summarize the user given text.';
                break;
            case 'completion':
                prompt = 'you are an assistant, you help to complete the user given text.';
                break;
            case 'auto-tagging':
                prompt = 'As an AI assistant, your primary objective is to generate descriptive tags that accurately represent the content and'
                    + ' key aspects of the text provided by the user.';
                break;
            case 'translation':
                const language = document.querySelector('#language-menu').value;
                prompt = 'you are an assistant, you translate the user given text in the language he wants, which is ' + language;
                break;
            case 'free-prompt':
                prompt = '';
                break;
            default:
                prompt = 'you are an assistant, state that an error occurred because of a mistake in the request without considering the user content.';
                break;
        }
        return prompt;
    }

    function getRequestParams(userText, modelType, model, prompt, context, isStreaming) {
        const params = {
            text: userText,
            modelType: modelType,
            model: model,
            prompt: context + prompt,
            stream: isStreaming,
        };
        return params;
    }

    function getRequestOptions(params, csrf) {
        const options = {
            method: 'POST',
            body: JSON.stringify(params),
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': csrf
            },
            signal: globalSignal
        };
        return options;
    }

    function tokenManager() {
        nbToken += countTokens(context[contextSize]);
        contextSize++;
        console.log("nbtoken : " + nbToken);
        // Manage the number of token so the request is not too long.
        let ind = 0;
        while (nbToken &gt; maxToken) {
            nbToken -= countTokens(context[ind]);
            console.log("nbToken : " + nbToken);
            context.shift();
            ind++;
        }
    }

    function handleButtonClick(event) {
        return new Promise(function (resolve) {
            const target = event.target;
            const msgID = target.id;
            // Vérifiez si l'élément cible a la classe copy-button
            if (target.classList.contains('copy-button')) {
                copyTextToClipboard(msgID);
            }
            resolve(msgID);
        });
    }

    // Update the interface and the context with the new infos.
    function updateChat(chatContent, generatedContent, model, elapsedTime, userText) {
        chatContent.innerHTML += addAssistantChat(generatedContent, model, elapsedTime);
        let actualMsgID = nbAssistMsg;
        console.log(actualMsgID);
        document.querySelector('#copy-button-' + actualMsgID).style.display = "block";
        document.querySelector('#include-button-' + actualMsgID).style.display = "block";
        context[contextSize] = 'user: ' + userText + '\n';
        context[contextSize] += 'assistant: ' + generatedContent + '\n';
        tokenManager();
    }

    function initChatOnStream(chatContent, model) {
        chatContent.innerHTML += addAssistantChat('', model, 0);
    }

    function updateChatOnStream(chatContent, completedReply) {
        context[contextSize] += completedReply;
        tokenManager();
        scrollToBottom();
    }

    function errorCatcher(chatContent, error) {
        chatContent.innerHTML += errorMessagePrint("An error occured: " + error.message);
    }

    function changeBtnState() {
        if (btnEnabled) {
            document.querySelector('#subButton').disabled = true;
            document.querySelector('#clearCtxt').disabled = true;
            document.querySelector('#clearWin').disabled = true;
            document.querySelector('#stopRqst').style.display = "block";
            btnEnabled = false;
        }
        else {
            document.querySelector('#subButton').disabled = false;
            document.querySelector('#clearCtxt').disabled = false;
            document.querySelector('#clearWin').disabled = false;
            document.querySelector('#stopRqst').style.display = "none";
            btnEnabled = true;
        }
    }

    function handleValidChunk(jsonMessages, completedReply, beginRep, isErr, model, startTime, userText) {
        for (const jsonMessage of jsonMessages) {
            if (jsonMessage.trim() !== '') {
                console.log(jsonMessage);
                const message = JSON.parse(jsonMessage);
                let reply = '';
                // Extract the generated reply from the response
                if (message.choices[0].finish_reason !== 'stop') {
                    reply = message.choices[0].delta.content;
                }
                console.log('Generated reply:', reply);

                // Handle the generated reply as desired
                if (reply) {
                    completedReply += reply;
                    if (completedReply.indexOf("An error occured") !== -1) {
                        isErr = true;
                        chatContent.innerHTML += errorMessagePrint(reply);
                    }
                    else if (completedReply.indexOf('ERROR: ') !== -1) {
                        isErr = true;
                        chatContent.innerHTML += errorMessagePrint("An error occured: " + completedReply);
                    }
                    else {
                        if (beginRep) {
                            initChatOnStream(chatContent, model);
                            beginRep = false;
                        }
                        const elapsedTime = (Date.now() - startTime) / 1000;
                        updateAssistantChat(nbAssistMsg, elapsedTime, reply, model);
                    }
                }

            }
        }
        return { isErr, beginRep, completedReply };
    }

    function processStream({ done, value }, chatContent, completedReply, accumulatedChunks, isErr, beginRep, reader, model, startTime, userText) {
        try {
            if (done) {
                console.log('Stream ended');
                console.log(accumulatedChunks);
                console.log(isErr);
                if (!isErr) {
                    document.querySelector('#copy-button-' + nbAssistMsg).style.display = "block";
                    document.querySelector('#include-button-' + nbAssistMsg).style.display = "block";
                    console.log(completedReply);
                    context[contextSize] += userText;
                    updateChatOnStream(chatContent, completedReply);
                }
                else {
                    if (isJSON(accumulatedChunks)) {
                        let message = JSON.parse(accumulatedChunks);
                        errorCatcher(chatContent, message.error);
                    }
                }
                changeBtnState();
                return;
            }
            else {
                accumulatedChunks += value;

                // Extract complete JSON messages
                let jsonMessages;
                let isValidChunk = true;
                if (accumulatedChunks.indexOf('data: ') !== -1) {
                    jsonMessages = accumulatedChunks.split('data: ').filter(Boolean);
                }
                else {
                    isValidChunk = false;
                }
                // Process complete JSON messages
                if (isValidChunk) {
                    accumulatedChunks = jsonMessages.pop(); // Keep the incomplete message for the next iteration
                    ({ isErr, beginRep, completedReply } = handleValidChunk(jsonMessages, completedReply, beginRep, isErr, model, startTime, userText));
                    return reader.read().then(value =&gt;
                        processStream(value, chatContent, completedReply, accumulatedChunks, isErr, beginRep, reader, model, startTime, userText));
                }
                else
                    return reader.read().then(value =&gt;
                        processStream(value, chatContent, completedReply, accumulatedChunks, true, beginRep, reader, model, startTime, userText));
            }
        } catch (error) {
            console.error('error stream : ', error);
        }

    }

    function streamResponse(chatContent, stream, model, startTime, userText) {
        const reader = stream.getReader();
        let accumulatedChunks = '';
        let completedReply = '';
        let isErr = false;
        let beginRep = true;

        return reader.read().then(value =&gt;
            processStream(value, chatContent, completedReply, accumulatedChunks, isErr, beginRep, reader, model, startTime, userText));
    }

    function streamingRequest(chatContent, URI, options, startTime, model, userText) {
        fetch(URI, options).then((response) =&gt; {
            const reader = response.body.getReader();
            return new ReadableStream({
                start(controller) {
                    function push() {
                        reader.read().then(({ done, value }) =&gt; {
                            if (done) {
                                controller.close();
                                return;
                            }
                            const chunk = new TextDecoder().decode(value);
                            controller.enqueue(chunk);
                            push();
                        });
                    }
                    push();
                }
            });
        }).then((stream) =&gt; {
            return streamResponse(chatContent, stream, model, startTime, userText);
        }).catch((error) =&gt; {
            console.log('stream error');
            console.error('Error:', error);
            errorCatcher(chatContent, error);
            changeBtnState();
        });
    }

    function requestModeResponse(URI, options, start, model, chatContent, userText) {
        fetch(URI, options)
            .then(response =&gt; response.json())
            .then(data =&gt; {
                const elapsedTime = (Date.now() - start) / 1000;
                if (data.code) {
                    console.error(data.code);
                    chatContent.innerHTML += errorMessagePrint("An error occured: " + data.code + " " + data.description);
                } else if (data.error) {
                    console.error(data.error);
                    chatContent.innerHTML += errorMessagePrint("An error occured: " + data.error.message);
                } else {
                    const content = data.choices[0].message.content;
                    if (content.indexOf('ERROR: ') != -1) {
                        chatContent.innerHTML += errorMessagePrint("An error occured: " + content);
                    }
                    else {
                        updateChat(chatContent, content, model, elapsedTime, userText);
                    }
                }
                scrollToBottom();
                changeBtnState();
            })
            .catch(error =&gt; {
                // Handle any errors except abort error, because
                // this happen on purpose.
                if (error.name !== 'AbortError') {
                    changeBtnState();
                    console.error(error);
                    console.log("error shape : " + error);
                    errorCatcher(chatContent, error);
                }
            });
    }

    function postRequest(options, chatContent, model, userText, requestMode) {
        changeBtnState();
        document.querySelector('#txt-input').value = '';
        const URI = "/xwiki/rest/v1/chat/completions";
        const start = Date.now();
        if (requestMode === 'streamMode') {
            streamingRequest(chatContent, URI, options, start, model, userText);
        }
        else requestModeResponse(URI, options, start, model, chatContent, userText);

    }

    function getModels(options) {
        fetch('/xwiki/rest/v1/models', options)
            .then(response =&gt; {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(json =&gt; {
                console.log(json);
                initModelMenu(json);
            })
            .catch(e =&gt; {
                console.log('An error occured trying to get the model list : ' + e.message);
            });
    }

    function submitChat(event, form) {
        event.preventDefault(); // Prevent the form from submitting normally
        // Get the text from the textarea
        const userText = "" + form.elements.input.value;
        if (userText === "") {
            alert("Your request is empty, please write an input.");
            return false;
        }
        console.log("sending...");

        // Which model should we adress and what feature is wanted
        const selectedMod = document.querySelector('#model-menu').value;
        const modelType = selectedMod.substring(0, selectedMod.indexOf("/"));
        const model = selectedMod.substring(selectedMod.indexOf("/") + 1);
        const selectedPrompt = document.querySelector('#features-menu').value;
        const prompt = getPrompt(selectedPrompt);
        const requestMode = document.querySelector('input[name="options"]:checked').value;
        maxToken = chooseMaxToken(modelType);
        console.log(maxToken);
        // Adding the user chat in the page
        const chatContent = document.querySelector('#chatContent');
        if (prompt !== '') {
            chatContent.innerHTML += addSystemChat('The prompt used is: ' + prompt);
        }
        chatContent.innerHTML += addUserChat(userText);
        scrollToBottom();

        // Create the string containing csrf token
        const csrf = '${services.csrf.token}';

        const params = getRequestParams(userText, modelType, model, prompt, context, requestMode);
        const options = getRequestOptions(params, csrf);

        // Make the POST request with query parameters
        postRequest(options, chatContent, model, userText, requestMode);

    }

    function abortRequest() {
        const chatContent = document.querySelector('#chatContent');
        globalAbortController.abort();
        // reset the signal
        globalAbortController = new AbortController();
        globalSignal = globalAbortController.signal;
        chatContent.innerHTML += addSystemChat("You aborted the ongoing request");
        scrollToBottom();
        changeBtnState();
    }

    function initFormEvent(form) {
        // Add an event listener to the form submit event
        form.addEventListener('submit', (event) =&gt; { submitChat(event, form) });

        // Add an event listener to the features menu change event
        const featuresMenu = document.querySelector('#features-menu');
        featuresMenu.addEventListener('change', (event) =&gt; {
            const selectedFunc = event.target.value;
            const languageMenu = document.querySelector('#language-menu');
            if (selectedFunc === 'translation') {
                languageMenu.style.display = 'inline';
            } else {
                languageMenu.style.display = 'none';
            }
        });

        // Add an event listener to the clear context button.
        const clearCtxtButton = document.querySelector('#clearCtxt');
        clearCtxtButton.addEventListener('click', (event) =&gt; {
            context = [];
            nbToken = 0;
        });

        const clearWinButton = document.querySelector('#clearWin');
        clearWinButton.addEventListener('click', (event) =&gt; {
            document.querySelector('#chatContent').innerHTML = '';
            nbAssistMsg = 0;
        });

        const modelMenu = document.querySelector('#model-menu');
        modelMenu.addEventListener('change', (event) =&gt; {
            blockStreamMode();
        });

        const stopRqstButton = document.querySelector('#stopRqst');
        stopRqstButton.addEventListener('click', (event) =&gt; {
            abortRequest();
        });
    }

    function configsToJson(configArr) {
        for (let conf of configArr) {
            console.log('conf : ', conf);
            var configArr = conf.split(";");
            console.log(configArr);
            let obj = {};
            configArr.forEach(pair =&gt; {
                console.log(pair);
                let [key, ...value] = pair.split(':');
                value = value.join(':');
                if (value[0] === '{') {
                    // if the value starts with a '{', it's a JSON object
                    console.log(value);
                    value = JSON.parse(value);
                }
                obj[key] = value;
            });
            configsJson.push(obj);
        }
        console.log('configsJson : ', configsJson);
    }

    function initModelMenu(modelList) {
        console.log('modelList : ' + modelList);
        const modelMenu = document.querySelector('#model-menu');
        modelList.forEach(element =&gt; {
            const prefix = element.prefix;
            const filter = element.filter;
            for (let model of element.data) {
                console.log(model.id);
                const value = prefix + '/' + model.id;
                const valueToDisplay = model.id + ' (' + prefix + ')';
                if (filter.indexOf(model.id) != -1)
                    modelMenu.innerHTML += `&lt;option value="${value}"&gt;${valueToDisplay}&lt;/option&gt;`
            }
        });

    }

    function init(configArr) {
        // alert("Received dom updated in JS");
        if (initDone)
            return;
        initDone = true;
        // Here, do something that will be executed at the moment the event is fired.
        // Select the form element
        const form = document.querySelector('#userChat');
        if (!form) {
            console.error("xwiki llm js failed to initialize because it could not find the #userChat form");
            return;
        }
        initFormEvent(form);
        configsToJson(configArr);
        console.log('configsJson : ', configsJson);

        const csrf = '${services.csrf.token}';
        const options = getRequestOptions(null, csrf);
        getModels(options);
    }

    return { init, includeInDoc, handleButtonClick };
});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>AI.Code.Javascript</name>
    <number>0</number>
    <className>XWiki.UIExtensionClass</className>
    <guid>cdd170ff-556b-413f-8bf8-bcc567365243</guid>
    <class>
      <name>XWiki.UIExtensionClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <async_cached>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_cached</name>
        <number>3</number>
        <prettyName>Cached</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_cached>
      <async_context>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>1</multiSelect>
        <name>async_context</name>
        <number>4</number>
        <prettyName>Context elements</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>, </separator>
        <separators>|, </separators>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <values>action=Action|doc.reference=Document|doc.revision|icon.theme=Icon theme|locale=Language|rendering.defaultsyntax=Default syntax|rendering.restricted=Restricted|rendering.targetsyntax=Target syntax|request.base=Request base URL|request.cookies|request.headers|request.parameters=Request parameters|request.remoteAddr|request.url=Request URL|request.wiki=Request wiki|user=User|wiki=Wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </async_context>
      <async_enabled>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_enabled</name>
        <number>2</number>
        <prettyName>Asynchronous rendering</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_enabled>
      <content>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>content</name>
        <number>1</number>
        <prettyName>Executed Content</prettyName>
        <restricted>0</restricted>
        <rows>25</rows>
        <size>120</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <extensionPointId>
        <disabled>0</disabled>
        <name>extensionPointId</name>
        <number>5</number>
        <prettyName>Extension Point ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </extensionPointId>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>6</number>
        <prettyName>Extension ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parameters>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>parameters</name>
        <number>7</number>
        <prettyName>Extension Parameters</prettyName>
        <restricted>0</restricted>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </parameters>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>8</number>
        <prettyName>Extension Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>wiki=Current Wiki|user=Current User|global=Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
    </class>
    <property>
      <async_cached>0</async_cached>
    </property>
    <property>
      <async_context/>
    </property>
    <property>
      <async_enabled>0</async_enabled>
    </property>
    <property>
      <content/>
    </property>
    <property>
      <extensionPointId>org.xwiki.platform.requirejs.module</extensionPointId>
    </property>
    <property>
      <name>org.xwiki.platform.requirejs.module.llm</name>
    </property>
    <property>
      <parameters>id=xwiki-llm
path=$xwiki.getURL("AI.Code.Javascript", "jsx", "language=$xcontext.language")</parameters>
    </property>
    <property>
      <scope>wiki</scope>
    </property>
  </object>
</xwikidoc>
